@model WebApi.Models.Account

@{
    ViewBag.Title = "Create";
}
<style>
    /* Full-width form container */
    .full-width-form-container {
        width: 100%;
        max-width: 1200px;
        margin: auto;
        margin-top: 100px;
        background-color: #f0f8ff;
        padding: 40px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    /* Header and subtext styling */
    .form-header {
        font-size: 32px;
        font-weight: bold;
        text-align: center;
        color: #0073e6;
        margin-bottom: 10px;
    }

    .form-subtext {
        font-size: 18px;
        text-align: center;
        color: #555;
        margin-bottom: 30px;
    }

    /* Form row layout */
    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 20px;
        margin-left: 100px;
    }

    /* Input styling */
    .form-input {
        flex: 1;
        min-width: 250px;
        padding: 15px;
        font-size: 16px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
        /* Input placeholder styling */
        .form-input::placeholder {
            color: #aaa;
        }

    /* Submit button styling */
    .submit-button {
        width: 100%;
        max-width: 300px;
        padding: 15px;
        font-size: 18px;
        font-weight: bold;
        color: #fff;
        background-color: #0073e6;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
        align-self: center;
        margin-left: 270px;
    }

        .submit-button:hover {
            background-color: #005bb5;
        }

    .form-container {
        display: grid;
        gap: 16px;
        padding-left: 230px;
    }

    .dd {
        padding-left: 250px;
        padding-bottom: 10px;
    }
</style>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <h2 class="form-header">Get in Touch</h2>
    <p class="form-subtext">Please fill out the form below</p>

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

<div class="form-container">
    <div class="form-row">
        <div class="form-group">
            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-input", placeholder = "First Name *" } })
            <div class="validation-message">
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-input", placeholder = "Last Name *" } })
            <div class="validation-message">
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group">
            @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-input", placeholder = "Phone *" } })
            <div class="validation-message">
                @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-input", placeholder = "E-mail *" } })
            <div class="validation-message">
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group">
            @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-input", placeholder = "Country *", id = "Country" } })
            <div class="validation-message">
                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-input", placeholder = "State *", id = "State" } })
            <div class="validation-message">
                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group">
            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-input", placeholder = "City *", id = "City" } })
            <div class="validation-message">
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.EditorFor(model => model.Street1, new { htmlAttributes = new { @class = "form-input", placeholder = "Street Address *" } })
            <div class="validation-message">
                @Html.ValidationMessageFor(model => model.Street1, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group">
            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-input", placeholder = "Zip Code *" } })
            <div class="validation-message">
                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-row">
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</div>

    if (TempData["SuccessMessage"] != null)
    {
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
    }
    }
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script type="text/javascript">
    $(document).ready(function () {
        $('#ZipCode').on('change', function () {
            var zipCode = $(this).val();
            if (zipCode.length < 5) {
                return;
            }

            $.ajax({
                url: '@Url.Action("GetLocationByZip", "WebApi")',
                type: 'GET',
                data: { zipCode: zipCode },
                success: function (data) {
                    if (data) {
                        $('#Country').val(data.Country);
                        $('#State').val(data.State);
                        $('#City').val(data.City);
                    } else {
                        alert("Location data not found for this ZIP code.");
                    }
                },
                error: function () {
                    alert("Error retrieving location details.");
                }
            });
        });
    }); // Closing bracket for document ready function
    </script>
